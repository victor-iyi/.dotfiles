{"url":"https://taplo.tamasfe.dev/schemas/rustfmt.toml.json","schema":{"$schema":"http://json-schema.org/draft-07/schema#","title":"rustfmt schema","description":"https://rust-lang.github.io/rustfmt","type":"object","properties":{"binop_separator":{"description":"Where to put a binary operator when a binary expression goes multiline\n\n### Unstable\nThis option requires Nightly Rust.","default":"Front","type":"string","enum":["Front","Back"]},"blank_lines_lower_bound":{"description":"Minimum number of blank lines which must be put between items\n\n### Unstable\nThis option requires Nightly Rust.","default":0,"type":"integer"},"blank_lines_upper_bound":{"description":"Maximum number of blank lines which can be put between items\n\n### Unstable\nThis option requires Nightly Rust.","default":1,"type":"integer"},"brace_style":{"description":"Brace style for items\n\n### Unstable\nThis option requires Nightly Rust.","default":"SameLineWhere","type":"string","enum":["AlwaysNextLine","PreferSameLine","SameLineWhere"]},"color":{"description":"What Color option to use when none is supplied: Always, Never, Auto\n\n### Unstable\nThis option requires Nightly Rust.","default":"Auto","type":"string","enum":["Always","Never","Auto"]},"combine_control_expr":{"description":"Combine control expressions with function calls\n\n### Unstable\nThis option requires Nightly Rust.","default":true,"type":"boolean","enum":[true,false]},"comment_width":{"description":"Maximum length of comments. No effect unless wrap_comments = true\n\n### Unstable\nThis option requires Nightly Rust.","default":80,"type":"integer"},"condense_wildcard_suffixes":{"description":"Replace strings of _ wildcards by a single .. in tuple patterns\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"control_brace_style":{"description":"Brace style for control flow constructs\n\n### Unstable\nThis option requires Nightly Rust.","default":"AlwaysSameLine","type":"string","enum":["AlwaysSameLine","ClosingNextLine","AlwaysNextLine"]},"disable_all_formatting":{"description":"Don't reformat anything\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"edition":{"description":"The edition of the parser (RFC 2052)","default":"2015","type":"string","enum":["2015","2018","2021"]},"emit_mode":{"description":"What emit Mode to use when none is supplied\n\n### Unstable\nThis option requires Nightly Rust.","default":"Files","type":"string","enum":["Files","Stdout","Coverage","Checkstyle","Json","ModifiedLines","Diff"]},"empty_item_single_line":{"description":"Put empty-body functions and impls on a single line\n\n### Unstable\nThis option requires Nightly Rust.","default":true,"type":"boolean","enum":[true,false]},"enum_discrim_align_threshold":{"description":"Align enum variants discrims, if their diffs fit within threshold\n\n### Unstable\nThis option requires Nightly Rust.","default":0,"type":"integer"},"error_on_line_overflow":{"description":"Error if unable to get all lines within max_width\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"error_on_unformatted":{"description":"Error if unable to get comments or string literals within max_width, or they are left with trailing whitespaces\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"fn_args_layout":{"description":"Control the layout of arguments in a function","default":"Tall","type":"string","enum":["Compressed","Tall","Vertical"]},"fn_single_line":{"description":"Put single-expression functions on a single line\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"force_explicit_abi":{"description":"Always print the abi for extern items","default":true,"type":"boolean","enum":[true,false]},"force_multiline_blocks":{"description":"Force multiline closure bodies and match arms to be wrapped in a block\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"format_code_in_doc_comments":{"description":"Format the code snippet in doc comments.\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"format_macro_bodies":{"description":"Format the bodies of macros\n\n### Unstable\nThis option requires Nightly Rust.","default":true,"type":"boolean","enum":[true,false]},"format_macro_matchers":{"description":"Format the metavariable matching patterns in macros\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"format_strings":{"description":"Format string literals where necessary\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"group_imports":{"description":"Controls the strategy for how imports are grouped together\n\n### Unstable\nThis option requires Nightly Rust.","default":"Preserve","type":"string","enum":["Preserve","StdExternalCrate"]},"hard_tabs":{"description":"Use tab characters for indentation, spaces for alignment","default":false,"type":"boolean","enum":[true,false]},"hide_parse_errors":{"description":"Hide errors from the parser\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"ignore":{"description":"Skip formatting the specified files and directories\n\n### Unstable\nThis option requires Nightly Rust.","default":[],"type":"array"},"imports_granularity":{"description":"Merge or split imports to the provided granularity\n\n### Unstable\nThis option requires Nightly Rust.","default":"Preserve","type":"string","enum":["Preserve","Crate","Module","Item"]},"imports_indent":{"description":"Indent of imports\n\n### Unstable\nThis option requires Nightly Rust.","default":"Block","type":"string","enum":["Visual","Block"]},"imports_layout":{"description":"Item layout inside a import block\n\n### Unstable\nThis option requires Nightly Rust.","default":"Mixed","type":"string","enum":["Vertical","Horizontal","HorizontalVertical","LimitedHorizontalVertical","Mixed"]},"indent_style":{"description":"How do we indent expressions or items\n\n### Unstable\nThis option requires Nightly Rust.","default":"Block","type":"string","enum":["Visual","Block"]},"inline_attribute_width":{"description":"Write an item and its attribute on the same line if their combined width is below a threshold\n\n### Unstable\nThis option requires Nightly Rust.","default":0,"type":"integer"},"license_template_path":{"description":"Beginning of file must match license template\n\n### Unstable\nThis option requires Nightly Rust.","default":"\"\"","type":"string"},"make_backup":{"description":"Backup changed files\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"match_arm_blocks":{"description":"Wrap the body of arms in blocks when it does not fit on the same line with the pattern of arms\n\n### Unstable\nThis option requires Nightly Rust.","default":true,"type":"boolean","enum":[true,false]},"match_arm_leading_pipes":{"description":"Determines whether leading pipes are emitted on match arms","default":"Never","type":"string","enum":["Always","Never","Preserve"]},"match_block_trailing_comma":{"description":"Put a trailing comma after a block based match arm (non-block arms are not affected)\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"max_width":{"description":"Maximum width of each line","default":100,"type":"integer"},"merge_derives":{"description":"Merge multiple `#[derive(...)]` into a single one","default":true,"type":"boolean","enum":[true,false]},"newline_style":{"description":"Unix or Windows line endings","default":"Auto","type":"string","enum":["Auto","Windows","Unix","Native"]},"normalize_comments":{"description":"Convert /* */ comments to // comments where possible\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"normalize_doc_attributes":{"description":"Normalize doc attributes as doc comments\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"overflow_delimited_expr":{"description":"Allow trailing bracket/brace delimited expressions to overflow\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"print_misformatted_file_names":{"description":"Prints the names of mismatched files that were formatted. Prints the names of files that would be formated when used with `--check` mode.","default":false,"type":"boolean","enum":[true,false]},"remove_nested_parens":{"description":"Remove nested parens","default":true,"type":"boolean","enum":[true,false]},"reorder_impl_items":{"description":"Reorder impl items\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"reorder_imports":{"description":"Reorder import and extern crate statements alphabetically","default":true,"type":"boolean","enum":[true,false]},"reorder_modules":{"description":"Reorder module statements alphabetically in group","default":true,"type":"boolean","enum":[true,false]},"report_fixme":{"description":"Report all, none or unnumbered occurrences of FIXME in source file comments\n\n### Unstable\nThis option requires Nightly Rust.","default":"Never","type":"string","enum":["Always","Unnumbered","Never"]},"report_todo":{"description":"Report all, none or unnumbered occurrences of TODO in source file comments\n\n### Unstable\nThis option requires Nightly Rust.","default":"Never","type":"string","enum":["Always","Unnumbered","Never"]},"required_version":{"description":"Require a specific version of rustfmt\n\n### Unstable\nThis option requires Nightly Rust.","default":"1.4.34","type":"string"},"skip_children":{"description":"Don't reformat out of line modules\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"space_after_colon":{"description":"Leave a space after the colon\n\n### Unstable\nThis option requires Nightly Rust.","default":true,"type":"boolean","enum":[true,false]},"space_before_colon":{"description":"Leave a space before the colon\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"spaces_around_ranges":{"description":"Put spaces around the  .. and ..= range operators\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"struct_field_align_threshold":{"description":"Align struct fields if their diffs fits within threshold\n\n### Unstable\nThis option requires Nightly Rust.","default":0,"type":"integer"},"struct_lit_single_line":{"description":"Put small struct literals on a single line\n\n### Unstable\nThis option requires Nightly Rust.","default":true,"type":"boolean","enum":[true,false]},"tab_spaces":{"description":"Number of spaces per tab","default":4,"type":"integer"},"trailing_comma":{"description":"How to handle trailing commas for lists\n\n### Unstable\nThis option requires Nightly Rust.","default":"Vertical","type":"string","enum":["Always","Never","Vertical"]},"trailing_semicolon":{"description":"Add trailing semicolon after break, continue and return\n\n### Unstable\nThis option requires Nightly Rust.","default":true,"type":"boolean","enum":[true,false]},"type_punctuation_density":{"description":"Determines if '+' or '=' are wrapped in spaces in the punctuation of types\n\n### Unstable\nThis option requires Nightly Rust.","default":"Wide","type":"string","enum":["Compressed","Wide"]},"unstable_features":{"description":"Enables unstable features. Only available on nightly channel\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"use_field_init_shorthand":{"description":"Use field initialization shorthand if possible","default":false,"type":"boolean","enum":[true,false]},"use_small_heuristics":{"description":"Whether to use different formatting for items and expressions if they satisfy a heuristic notion of 'small'","default":"Default","type":"string","enum":["Off","Max","Default"]},"use_try_shorthand":{"description":"Replace uses of the try! macro by the ? shorthand","default":false,"type":"boolean","enum":[true,false]},"version":{"description":"Version of formatting rules\n\n### Unstable\nThis option requires Nightly Rust.","default":"One","type":"string","enum":["One","Two"]},"where_single_line":{"description":"Force where-clauses to be on a single line\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]},"wrap_comments":{"description":"Break comments to fit on the line\n\n### Unstable\nThis option requires Nightly Rust.","default":false,"type":"boolean","enum":[true,false]}},"x-taplo-info":{"authors":["Aloso (https://github.com/Aloso)"],"patterns":["^(.*(/|\\\\)rustfmt\\.toml|rustfmt\\.toml)$"]}}}